// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  email     String  @unique
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bets       Bet[]
  transactions Transaction[]
  apiLogs     ApiLog[]
  externalApiAccounts ExternalApiAccount[]
  userBalances UserBalance?
}

model ExternalApiAccount {
  id                  Int    @id @default(autoincrement())
  userId              Int    @unique
  externalUserId      String
  externalSecretKey   String
  isActive            Boolean @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Bet {
  id            Int     @id @default(autoincrement())
  userId        Int
  externalBetId String
  amount        Decimal
  status        String
  winAmount     Decimal?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?

  user User @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id            Int     @id @default(autoincrement())
  userId        Int
  betId         Int?
  type          String
  amount        Decimal
  balanceBefore Decimal
  balanceAfter  Decimal
  description   String
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  bet  Bet? @relation(fields: [betId], references: [id])
}

model ApiLog {
  id              Int     @id @default(autoincrement())
  userId          Int
  endpoint        String
  method          String
  requestBody     Json
  responseBody    Json
  statusCode      Int
  requestDuration Int
  ipAddress       String
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserBalance {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  balance        Decimal
  externalBalance Decimal
  lastCheckedAt  DateTime

  user User @relation(fields: [userId], references: [id])
}

