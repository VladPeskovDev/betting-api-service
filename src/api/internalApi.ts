import axios, { AxiosError } from "axios";
import crypto from "crypto";
import dotenv from "dotenv";
import { prisma } from "../../prisma/client"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º Prisma

dotenv.config();

const BET_API_BASE_URL = process.env.BETTING_API_URL || "https://bet-provider.coolify.tgapps.cloud/api";

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è API-–∫–ª—é—á–∞ –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
 */
async function getAdminCredentials() {
  const adminCredentials = await prisma.externalApiAccount.findUnique({
    where: { userId: 2 }, 
  });

  if (!adminCredentials) {
    throw new Error("Admin API credentials not found in the database");
  }

  return {
    userId: adminCredentials.externalUserId,
    secretKey: adminCredentials.externalSecretKey,
  };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç HMAC SHA-512 –ø–æ–¥–ø–∏—Å—å
 */
function createSignature(body: Record<string, unknown>, secretKey: string): string {
  const payload = JSON.stringify(body);
  return crypto.createHmac("sha512", secretKey).update(payload).digest("hex");
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ –≤–Ω–µ—à–Ω–∏–π API
 */
async function callExternalApi(
  method: "GET" | "POST",
  endpoint: string,
  data: Record<string, unknown> = {}
) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥—ã –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    const { userId, secretKey } = await getAdminCredentials();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    const signature = createSignature(method === "GET" ? {} : data, secretKey);

    const headers = {
      "user-id": userId,
      "x-signature": signature,
      "Content-Type": "application/json",
    };

    console.log("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API:", { method, url: `${BET_API_BASE_URL}${endpoint}`, headers });

    let response;
    if (method === "GET") {
      response = await axios.get(`${BET_API_BASE_URL}${endpoint}`, { headers });
    } else {
      response = await axios.post(`${BET_API_BASE_URL}${endpoint}`, data, { headers });
    }

    return response.data;
  } catch (err) {
    const error = err as AxiosError;
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≤–Ω–µ—à–Ω–µ–≥–æ API:", error.response?.data || error.message);
    throw new Error(`External API error: ${JSON.stringify(error.response?.data || error.message)}`);
  }
}

export { callExternalApi };
